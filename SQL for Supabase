-- Remove the scenario_id column from the reviewers table
ALTER TABLE reviewers DROP COLUMN scenario_id;

-- Create a new table to link scenarios and reviewers
CREATE TABLE scenario_reviewers (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  scenario_id UUID NOT NULL REFERENCES benchmark_scenarios(id) ON DELETE CASCADE,
  reviewer_id UUID NOT NULL REFERENCES reviewers(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(scenario_id, reviewer_id)
);

-- Add indexes to improve query performance
CREATE INDEX idx_scenario_reviewers_scenario_id ON scenario_reviewers(scenario_id);
CREATE INDEX idx_scenario_reviewers_reviewer_id ON scenario_reviewers(reviewer_id);

-- Add a new column to the runs table
ALTER TABLE runs
ADD COLUMN total_time_usage INTEGER DEFAULT 0;

-- Create or replace a function to update the total_time_usage
CREATE OR REPLACE FUNCTION update_run_time_usage(
  run_id UUID,
  time_increment INTEGER
)
RETURNS VOID AS $$
BEGIN
  UPDATE runs
  SET total_time_usage = total_time_usage + time_increment
  WHERE id = run_id;
END;
$$ LANGUAGE plpgsql;
-- Create or replace a function to start a run transactionally
CREATE OR REPLACE FUNCTION start_paused_run(run_id UUID)
RETURNS BOOLEAN AS $$
DECLARE
  current_state TEXT;
  run_timeout INTEGER;
  run_start_time TIMESTAMP;
BEGIN
  -- Start a transaction
  BEGIN
    -- Lock the row and get the current state, timeout, and start time
    SELECT state, timeout, created_at INTO current_state, run_timeout, run_start_time
    FROM runs
    WHERE id = run_id
    FOR UPDATE;

    -- Check if the run has timed out
    IF EXTRACT(EPOCH FROM (NOW() - run_start_time)) > run_timeout THEN
      -- Update the state to 'timed_out'
      UPDATE runs
      SET state = 'timed_out'
      WHERE id = run_id;
      
      RETURN FALSE;
    -- Check if the state is 'paused'
    ELSIF current_state = 'paused' THEN
      -- Update the state to 'running'
      UPDATE runs
      SET state = 'running'
      WHERE id = run_id;
      
      RETURN TRUE;
    ELSE
      -- If the state is not 'paused', return false
      RETURN FALSE;
    END IF;
  END;
END;
$$ LANGUAGE plpgsql;
